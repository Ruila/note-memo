"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1490],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),m=o,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||a;return r?n.createElement(f,c(c({ref:t},p),{},{components:r})):n.createElement(f,c({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1962:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:1,title:"[JS] closure"},c="[JS] closure",s={unversionedId:"Javascript/js-closure",id:"Javascript/js-closure",title:"[JS] closure",description:"Intro",source:"@site/docs/Javascript/js-closure.md",sourceDirName:"Javascript",slug:"/Javascript/js-closure",permalink:"/wills-memo/docs/Javascript/js-closure",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Javascript/js-closure.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"[JS] closure"},sidebar:"tutorialSidebar",previous:{title:"[JS] call",permalink:"/wills-memo/docs/Javascript/js-call"},next:{title:"[JS] event delegation",permalink:"/wills-memo/docs/Javascript/js-event-delegation"}},i={},l=[{value:"Intro",id:"intro",level:2},{value:"Scoping with let and const",id:"scoping-with-let-and-const",level:2},{value:"Reference",id:"reference",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"js-closure"},"[JS]"," closure"),(0,o.kt)("h2",{id:"intro"},"Intro"),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"closure")," is the combination of a function bundled together (enclosed) with references to its surrounding state (the ",(0,o.kt)("strong",{parentName:"p"},"lexical environment"),")."),(0,o.kt)("p",null,"In other words, a closure gives you ",(0,o.kt)("strong",{parentName:"p"},"access to an outer function's scope from an inner function"),"."),(0,o.kt)("p",null,"In JavaScript, closures are ",(0,o.kt)("strong",{parentName:"p"},"created every time a function is created"),", at function creation time."),(0,o.kt)("h2",{id:"scoping-with-let-and-const"},"Scoping with let and const"),(0,o.kt)("p",null,"Traditionally (before ES6), JavaScript only had two kinds of scopes: ",(0,o.kt)("strong",{parentName:"p"},"function scope")," and ",(0,o.kt)("strong",{parentName:"p"},"global scope"),"."),(0,o.kt)("p",null,"Variables declared with var are ",(0,o.kt)("strong",{parentName:"p"},"either function-scoped or global-scoped"),", depending on whether they are declared within a function or outside a function."),(0,o.kt)("p",null,"This can be tricky, because blocks with curly braces do not create scopes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"if (Math.random() > 0.5) {\n  var x = 1;\n} else {\n  var x = 2;\n}\nconsole.log(x);\n")),(0,o.kt)("p",null,"In ",(0,o.kt)("strong",{parentName:"p"},"ES6"),", JavaScript introduced the let and const declarations, which, among other things like temporal dead zones, ",(0,o.kt)("strong",{parentName:"p"},"allow you to create block-scoped variables"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"if (Math.random() > 0.5) {\n  const x = 1;\n} else {\n  const x = 2;\n}\nconsole.log(x); // ReferenceError: x is not defined\n")),(0,o.kt)("p",null,"In essence, ",(0,o.kt)("strong",{parentName:"p"},"blocks are finally treated as scopes in ES6"),", ",(0,o.kt)("strong",{parentName:"p"},"but only if you declare variables with let or const"),"."),(0,o.kt)("h2",{id:"reference"},"Reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"@ ",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"},"MDN")," - closure")))}d.isMDXComponent=!0}}]);