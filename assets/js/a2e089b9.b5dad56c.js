"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2368],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>b});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,b=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(b,a(a({ref:t},p),{},{components:r})):n.createElement(b,a({ref:t},p))}));function b(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9444:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const i={title:"[Docker] Initialize database"},a="[Docker] Initialize database",c={unversionedId:"Docker/docker-initialize-db",id:"Docker/docker-initialize-db",title:"[Docker] Initialize database",description:"The methods of initializing Database with docker in the local environment.",source:"@site/docs/Docker/docker-initialize-db.md",sourceDirName:"Docker",slug:"/Docker/docker-initialize-db",permalink:"/note-memo/docs/Docker/docker-initialize-db",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Docker/docker-initialize-db.md",tags:[],version:"current",frontMatter:{title:"[Docker] Initialize database"},sidebar:"tutorialSidebar",previous:{title:"[CSS] selector priority",permalink:"/note-memo/docs/CSS/css-priority"},next:{title:"[Docker] volumes",permalink:"/note-memo/docs/Docker/docker-volumes"}},l={},s=[{value:"1. Copy sql script to /docker-entrypoint-initdb.d",id:"1-copy-sql-script-to-docker-entrypoint-initdbd",level:2},{value:"Prepare your sql like:",id:"prepare-your-sql-like",level:4},{value:"Copy to docker",id:"copy-to-docker",level:4},{value:"then run <code>docker-compose up -d</code>, you can see the <code>public.users</code> table.",id:"then-run-docker-compose-up--d-you-can-see-the-publicusers-table",level:4},{value:"-&gt; Demo",id:"--demo",level:4}],p={toc:s},d="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"docker-initialize-database"},"[Docker]"," Initialize database"),(0,o.kt)("p",null,"The methods of initializing Database with docker in the local environment."),(0,o.kt)("h2",{id:"1-copy-sql-script-to-docker-entrypoint-initdbd"},"1. Copy sql script to /docker-entrypoint-initdb.d"),(0,o.kt)("h4",{id:"prepare-your-sql-like"},"Prepare your sql like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:"title=init.sql",title:"init.sql"},"CREATE TABLE public.users\n(\n    id serial NOT NULL,\n    name varchar UNIQUE,\n    password varchar,\n    created_at timestamp(3) without time zone DEFAULT LOCALTIMESTAMP,\n    updated_at timestamp(3) without time zone DEFAULT LOCALTIMESTAMP,\n    PRIMARY KEY (id)\n);\n\nINSERT INTO public.users (name, password)\nVALUES ('root', 'root');\n")),(0,o.kt)("h4",{id:"copy-to-docker"},"Copy to docker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.8'\nservices:\n  api:\n    container_name: api\n    restart: always\n    build: .\n    ports:\n      - ${PORT}:${PORT}\n    depends_on:\n      - db\n    volumes:\n      - .:/usr/src/app\n\n  db:\n    container_name: postgres\n    image: postgres\n    ports:\n      - '5432:${DB_PORT}'\n    volumes:\n      - data:/data/db\n      # copy the sql script to create tables\n      - ./init.sql:/docker-entrypoint-initdb.d/create_tables.sql\n    environment:\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n      - POSTGRES_DB=${DB_NAME}\n      - POSTGRES_USER=${DB_USER}\n\nvolumes:\n  data: {}\n\n")),(0,o.kt)("h4",{id:"then-run-docker-compose-up--d-you-can-see-the-publicusers-table"},"then run ",(0,o.kt)("inlineCode",{parentName:"h4"},"docker-compose up -d"),", you can see the ",(0,o.kt)("inlineCode",{parentName:"h4"},"public.users")," table."),(0,o.kt)("h4",{id:"--demo"},"-> ",(0,o.kt)("a",{parentName:"h4",href:"https://github.com/Ruila/url-shortener-backend"},"Demo")))}u.isMDXComponent=!0}}]);